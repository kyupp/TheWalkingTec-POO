/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.thewalkingtec.poo;

import com.mycompany.thewalkingtec.poo.Componentes.ReliquiaDeLaVida;
import com.mycompany.thewalkingtec.poo.Componentes.Componente;
import com.mycompany.thewalkingtec.poo.Componentes.Defensas.Defensa;
import com.mycompany.thewalkingtec.poo.Componentes.Defensas.DefensaContacto;
import com.mycompany.thewalkingtec.poo.Terreno.Casilla;
import java.awt.Color;
import java.awt.Point;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionAdapter;
import java.util.ArrayList;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;

/**
 *
 * @author kyup
 */
public class fPrincipal extends javax.swing.JFrame {

    //Componentes del juego
    private int TAMANO_TERRENO = 25;
    private Casilla[][] terreno = new Casilla[25][25];
    private ArrayList<Componente> ejercito = new ArrayList<Componente>();
    private ArrayList<Componente> atacantes = new ArrayList<Componente>();
    private ArrayList<Componente> defensasDisponibles = new ArrayList<Componente>();
    private ReliquiaDeLaVida reliquia = new ReliquiaDeLaVida(this, "Reliquia", 100, "/Imagenes/fotoArbol.png");
    boolean reliquiaPlaced = false;

    //Atributos de juego
    private int nivelActual = 0;
    private int capacidadEjercito = 20;

    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(fPrincipal.class.getName());

    /**
     * Creates new form fPrincipal
     */
    public fPrincipal() {

        initComponents();
        inicializarTerreno();
        generarTerreno();
        inicializarDefensas();
       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlTerreno = new javax.swing.JPanel();
        pnlUtilidades = new javax.swing.JPanel();
        tbPnlComponentes = new javax.swing.JTabbedPane();
        pnlComponentes = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txaLog = new javax.swing.JTextArea();
        btnIniciar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1170, 790));
        setResizable(false);
        setSize(new java.awt.Dimension(1170, 790));

        pnlTerreno.setBackground(new java.awt.Color(153, 255, 153));
        pnlTerreno.setMinimumSize(new java.awt.Dimension(790, 750));
        pnlTerreno.setPreferredSize(new java.awt.Dimension(750, 750));

        javax.swing.GroupLayout pnlTerrenoLayout = new javax.swing.GroupLayout(pnlTerreno);
        pnlTerreno.setLayout(pnlTerrenoLayout);
        pnlTerrenoLayout.setHorizontalGroup(
            pnlTerrenoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        pnlTerrenoLayout.setVerticalGroup(
            pnlTerrenoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 750, Short.MAX_VALUE)
        );

        pnlUtilidades.setBackground(new java.awt.Color(255, 255, 204));
        pnlUtilidades.setMinimumSize(new java.awt.Dimension(400, 760));
        pnlUtilidades.setPreferredSize(new java.awt.Dimension(400, 750));

        tbPnlComponentes.setBackground(new java.awt.Color(255, 255, 102));
        tbPnlComponentes.setOpaque(true);

        javax.swing.GroupLayout pnlComponentesLayout = new javax.swing.GroupLayout(pnlComponentes);
        pnlComponentes.setLayout(pnlComponentesLayout);
        pnlComponentesLayout.setHorizontalGroup(
            pnlComponentesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 397, Short.MAX_VALUE)
        );
        pnlComponentesLayout.setVerticalGroup(
            pnlComponentesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 329, Short.MAX_VALUE)
        );

        tbPnlComponentes.addTab("tab1", pnlComponentes);

        txaLog.setColumns(20);
        txaLog.setRows(5);
        jScrollPane1.setViewportView(txaLog);

        btnIniciar.setText("Iniciar");
        btnIniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIniciarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlUtilidadesLayout = new javax.swing.GroupLayout(pnlUtilidades);
        pnlUtilidades.setLayout(pnlUtilidadesLayout);
        pnlUtilidadesLayout.setHorizontalGroup(
            pnlUtilidadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlUtilidadesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlUtilidadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(tbPnlComponentes, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 397, Short.MAX_VALUE)
                    .addGroup(pnlUtilidadesLayout.createSequentialGroup()
                        .addComponent(btnIniciar, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        pnlUtilidadesLayout.setVerticalGroup(
            pnlUtilidadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlUtilidadesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tbPnlComponentes, javax.swing.GroupLayout.PREFERRED_SIZE, 354, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addComponent(btnIniciar, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pnlTerreno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlUtilidades, javax.swing.GroupLayout.PREFERRED_SIZE, 409, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlTerreno, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(pnlUtilidades, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnIniciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIniciarActionPerformed
        // TODO add your handling code here:
        iniciarJuego();
    }//GEN-LAST:event_btnIniciarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new fPrincipal().setVisible(true));
    }

    private void inicializarTerreno() {
        for (int i = 0; i < TAMANO_TERRENO; i++) {
            for (int j = 0; j < TAMANO_TERRENO; j++) {
                this.terreno[i][j] = new Casilla();
            }
        }
    }

    private void initDefensa(Componente estructuraDefensa, int pos) {
        JLabel lblDefensa = new JLabel("s");
        lblDefensa.setOpaque(true);
        lblDefensa.setBackground(new java.awt.Color(168, 117, 50));
        int x = 30;
        int y = 30;
       
        lblDefensa.setBounds(x + pos, y, 30, 30);

        System.out.println(estructuraDefensa.getClass());
        //Cargar imagen del Ã¡rbol y asignarla al label
        ImageIcon iconoOriginal = new ImageIcon(new ImageIcon(getClass().getResource(estructuraDefensa.getApariencia())).getImage().getScaledInstance(lblDefensa.getWidth(), lblDefensa.getHeight(), 0));
        lblDefensa.setIcon(iconoOriginal);

        pnlComponentes.add(lblDefensa);
        initArrastreLabel(lblDefensa, estructuraDefensa);
    }

    private void initArrastreLabel(JLabel lbl2, Componente estructuraDefensa) {

        final Point[] puntoInicial = {null};
        final JLabel[] moviendo = {null};
        // Crear copia del panel actual
        JLabel nuevaDefensa = new JLabel();
        nuevaDefensa.setBackground(lbl2.getBackground());
        nuevaDefensa.setOpaque(true);
        nuevaDefensa.setSize(30, 30);

        estructuraDefensa.setRefLabel(nuevaDefensa);

        lbl2.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                if (estructuraDefensa instanceof ReliquiaDeLaVida && reliquiaPlaced) {
                    txaLog.append("La Reliquia de la Vida solo puede colocarse una vez.\n");
                    limpiarArrastreTemporal();
                    return;
                } else if (estructuraDefensa instanceof ReliquiaDeLaVida) {
                    reliquiaPlaced = true;
                }

                if (fPrincipal.this.ejercito.size() <= fPrincipal.this.capacidadEjercito + 1) {
                    puntoInicial[0] = e.getPoint(); // Guarda la posiciÃ³n inicial cuando se da click

                    moviendo[0] = new JLabel(lbl2.getText());
                    moviendo[0].setOpaque(true);
                    moviendo[0].setBackground(lbl2.getBackground());
                    moviendo[0].setSize(lbl2.getSize());
                    moviendo[0].setBorder(lbl2.getBorder());

                    JPanel temporal = (JPanel) getGlassPane();
                    temporal.setLayout(null);
                    temporal.add(moviendo[0]);
                    temporal.setVisible(true);

                    Point puntoFrame = SwingUtilities.convertPoint(temporal, e.getPoint(), getGlassPane());
                    moviendo[0].setLocation(puntoFrame);
                }
            }

            @Override
            public void mouseReleased(MouseEvent e) {
                if (moviendo[0] == null) {
                    return;
                }

                Point puntoPantalla = e.getLocationOnScreen();
                Point puntoTerreno = pnlTerreno.getLocationOnScreen();

                int xEnTerreno = puntoPantalla.x - puntoTerreno.x - puntoInicial[0].x;
                int yEnTerreno = puntoPantalla.y - puntoTerreno.y - puntoInicial[0].y;

                SwingUtilities.convertPointFromScreen(puntoPantalla, pnlTerreno);
                int col = puntoPantalla.x / 30;
                int fila = puntoPantalla.y / 30;

                if (xEnTerreno >= 0 && yEnTerreno >= 0
                        && xEnTerreno < pnlTerreno.getWidth() && yEnTerreno < pnlTerreno.getHeight()
                        && !terreno[col][fila].estaOcupada()) {

                    // Crear una copia independiente del Componente
                    Componente nuevaEstructura = estructuraDefensa.clonar(fPrincipal.this);

                    // Crear el JLabel definitivo en el terreno
                    JLabel nuevaDefensa = new JLabel("L");
                    nuevaDefensa.setSize(30, 30);
                    nuevaDefensa.setOpaque(true);
                    nuevaDefensa.setBackground(new java.awt.Color(66, 245, 66));
                    nuevaDefensa.setBorder(BorderFactory.createLineBorder(Color.BLACK));
                    nuevaDefensa.setLocation(xEnTerreno, yEnTerreno);

                    nuevaEstructura.setRefLabel(nuevaDefensa);
                    pnlTerreno.add(nuevaDefensa);
                    pnlTerreno.repaint();

                    // AÃ±adir la estructura al ejÃ©rcito
                    if (!(estructuraDefensa instanceof ReliquiaDeLaVida)) {
                        fPrincipal.this.ejercito.add(nuevaEstructura);
                    }

                    nuevaEstructura.setRefLabel(nuevaDefensa);

                    // Si es la reliquia, actualiza la referencia global tambiÃ©n
                    if (nuevaEstructura instanceof ReliquiaDeLaVida) {
                        fPrincipal.this.reliquia = (ReliquiaDeLaVida) nuevaEstructura;
                    }

                    // Insertar en la casilla
                    terreno[col][fila].insertarTropa(nuevaEstructura);

                    txaLog.append("Label movido al terreno en x: " + xEnTerreno + " y: " + yEnTerreno + "\n");
                    txaLog.append(nuevaEstructura.toString() + "\n");
                } else {
                    txaLog.append("Soltado fuera del terreno o la casilla estÃ¡ ocupada.\n");
                }

                // Limpiar temporal
                JPanel temporal = (JPanel) getGlassPane();
                temporal.remove(moviendo[0]);
                temporal.repaint();
                temporal.setVisible(true);
                moviendo[0] = null;

            }

        });

        lbl2.addMouseMotionListener(new MouseMotionAdapter() {
            @Override
            public void mouseDragged(MouseEvent e) {
                if (moviendo[0] != null) {
                    JPanel temporal = (JPanel) getGlassPane();
                    Point p = SwingUtilities.convertPoint(lbl2, e.getPoint(), temporal);
                    moviendo[0].setLocation(p.x - puntoInicial[0].x, p.y - puntoInicial[0].y);
                    temporal.repaint();
                }
            }
        });
    }

    private void limpiarArrastreTemporal() {
        JPanel temporal = (JPanel) getGlassPane();
        temporal.removeAll();
        temporal.repaint();
        temporal.setVisible(false);
    }

    private void generarTerreno() {
        //Tomar el tamaÃ±o del ejercito a agregar
        int x = 0;
        int y = 0;
        for (int i = 0; i < TAMANO_TERRENO; i++) {
            for (int j = 0; j < TAMANO_TERRENO; j++) {
                //Para cada soldado se crea un Label
                JLabel nuevoLabel = new JLabel("");
                nuevoLabel.setOpaque(true);
                nuevoLabel.setBorder(BorderFactory.createLineBorder(Color.BLACK, 1)); // Aplica el borde
                nuevoLabel.setBounds(x, y, 30, 30);

                nuevoLabel.setBackground(new java.awt.Color(66, 245, 66));
                if (i >= 23 || j >= 23 || i < 2 || j < 2) {
                    nuevoLabel.setBackground(new java.awt.Color(47, 79, 79));
                }

                pnlTerreno.add(nuevoLabel);
                this.terreno[i][j] = new Casilla(pnlTerreno, txaLog, nuevoLabel.getLocation(), nuevoLabel);

                y += 30;
            }
            y = 0;
            x += 30;
        }
        this.repaint();
    }
    
    public void comprobarGanar(){
        
    }
    
    public void comprobarPerder(){
        
    }

    public void subirDeNivel() {
        //Instrucciones de cambios cuando suben de nivel
    }

    public void iniciarJuego() {
        //Instrucciones para iniciar el juego
        for (Componente estructura : ejercito) {
            estructura.start();
        }
    }
    
    public void inicializarDefensas(){
        //leer defensas del archivo
        //Cargar al panel componentes las defensas al arrayList defensas disponibles
        defensasDisponibles.add(reliquia);
        defensasDisponibles.add(new DefensaContacto(this, "Hulk - De Contacto", 100, 0, 0, 0, 0, 1, 0, "/Imagenes/hulk.png"));
        //Habilitar las que esten al nivel y desabilitar las que no
        int i = 0;
        for(Componente defensa : defensasDisponibles){
            if(defensa.getNivelDeAparicion() <= nivelActual){
                initDefensa(defensa, i);
                i+=40;
                if(i >= 350){
                    i = 0;
                }
            }
        }
    }

    public Point getObjetivoLocation() {
        return this.reliquia.getRefLabel().getLocation();
    }

    public ReliquiaDeLaVida getObjetivo() {
        return this.reliquia;
    }

    public void moverZombie(JLabel refLabel, int x, int y) {
        refLabel.setLocation(x, y);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnIniciar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel pnlComponentes;
    private javax.swing.JPanel pnlTerreno;
    private javax.swing.JPanel pnlUtilidades;
    private javax.swing.JTabbedPane tbPnlComponentes;
    private javax.swing.JTextArea txaLog;
    // End of variables declaration//GEN-END:variables
}
