/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.thewalkingtec.poo;

import com.mycompany.thewalkingtec.poo.Componentes.ReliquiaDeLaVida;
import com.mycompany.thewalkingtec.poo.Componentes.Componente;
import com.mycompany.thewalkingtec.poo.Componentes.Defensas.Defensa;
import com.mycompany.thewalkingtec.poo.Componentes.Defensas.DefensaContacto;
import com.mycompany.thewalkingtec.poo.Componentes.Zombies.Zombie;
import com.mycompany.thewalkingtec.poo.Componentes.Zombies.ZombieContacto;
import com.mycompany.thewalkingtec.poo.Terreno.Casilla;
import java.awt.Color;
import java.awt.Image;
import java.awt.Point;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionAdapter;
import java.util.ArrayList;
import java.util.Random;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;

/**
 *
 * @author kyup
 */
public class fPrincipal extends javax.swing.JFrame {

    //Componentes del juego
    private int TAMANO_TERRENO = 25;
    private Casilla[][] terreno = new Casilla[25][25];
    private ArrayList<Defensa> ejercito = new ArrayList<Defensa>();
    private ArrayList<Zombie> atacantes = new ArrayList<Zombie>();
    private ArrayList<Componente> defensasDisponibles = new ArrayList<Componente>();
    private ReliquiaDeLaVida reliquia = new ReliquiaDeLaVida(this, "Reliquia", 100, "/Imagenes/fotoArbol.png");
    boolean reliquiaPlaced = false;

    //Atributos de juego
    private int nivelActual = 0;
    private int capacidadEjercito = 20;

    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(fPrincipal.class.getName());

    /**
     * Creates new form fPrincipal
     */
    public fPrincipal() {

        initComponents();
        inicializarTerreno();
        generarTerreno();
        inicializarDefensas();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        pnlTerreno = new javax.swing.JPanel();
        pnlUtilidades = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txaLog = new javax.swing.JTextArea();
        btnIniciar = new javax.swing.JButton();
        btnPausa = new javax.swing.JButton();
        btnSalir = new javax.swing.JButton();
        pnlComponentes = new javax.swing.JPanel();

        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(jList1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1170, 790));
        setResizable(false);
        setSize(new java.awt.Dimension(1170, 790));

        pnlTerreno.setBackground(new java.awt.Color(153, 255, 153));
        pnlTerreno.setMinimumSize(new java.awt.Dimension(790, 750));
        pnlTerreno.setPreferredSize(new java.awt.Dimension(750, 750));

        javax.swing.GroupLayout pnlTerrenoLayout = new javax.swing.GroupLayout(pnlTerreno);
        pnlTerreno.setLayout(pnlTerrenoLayout);
        pnlTerrenoLayout.setHorizontalGroup(
            pnlTerrenoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        pnlTerrenoLayout.setVerticalGroup(
            pnlTerrenoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 750, Short.MAX_VALUE)
        );

        pnlUtilidades.setBackground(new java.awt.Color(255, 255, 204));
        pnlUtilidades.setMinimumSize(new java.awt.Dimension(400, 760));
        pnlUtilidades.setPreferredSize(new java.awt.Dimension(400, 750));

        txaLog.setColumns(20);
        txaLog.setRows(5);
        jScrollPane1.setViewportView(txaLog);

        btnIniciar.setText("Iniciar");
        btnIniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIniciarActionPerformed(evt);
            }
        });

        btnPausa.setText("Pausa");
        btnPausa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPausaActionPerformed(evt);
            }
        });

        btnSalir.setBackground(new java.awt.Color(255, 102, 102));
        btnSalir.setForeground(new java.awt.Color(255, 255, 255));
        btnSalir.setText("Salir");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlComponentesLayout = new javax.swing.GroupLayout(pnlComponentes);
        pnlComponentes.setLayout(pnlComponentesLayout);
        pnlComponentesLayout.setHorizontalGroup(
            pnlComponentesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 247, Short.MAX_VALUE)
        );
        pnlComponentesLayout.setVerticalGroup(
            pnlComponentesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 329, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout pnlUtilidadesLayout = new javax.swing.GroupLayout(pnlUtilidades);
        pnlUtilidades.setLayout(pnlUtilidadesLayout);
        pnlUtilidadesLayout.setHorizontalGroup(
            pnlUtilidadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlUtilidadesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlUtilidadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlUtilidadesLayout.createSequentialGroup()
                        .addGap(0, 142, Short.MAX_VALUE)
                        .addGroup(pnlUtilidadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(pnlComponentes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(pnlUtilidadesLayout.createSequentialGroup()
                                .addComponent(btnIniciar, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnPausa, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(6, 6, 6)))
                .addContainerGap())
        );
        pnlUtilidadesLayout.setVerticalGroup(
            pnlUtilidadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlUtilidadesLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(pnlComponentes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(pnlUtilidadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnPausa, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnIniciar, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSalir, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pnlTerreno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlUtilidades, javax.swing.GroupLayout.PREFERRED_SIZE, 409, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlTerreno, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(pnlUtilidades, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnIniciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIniciarActionPerformed
        if (reliquiaPlaced) {
            generarZombies("s");
            inicializarJuego();
        } else {
            System.out.println("No se puede iniciar");
        }
    }//GEN-LAST:event_btnIniciarActionPerformed

    private void btnPausaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPausaActionPerformed
        // TODO add your handling code here:
        pausar();
    }//GEN-LAST:event_btnPausaActionPerformed

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        // TODO: Guardar en el archivo todo

    }//GEN-LAST:event_btnSalirActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new fPrincipal().setVisible(true));
    }

    private void inicializarTerreno() {
        for (int i = 0; i < TAMANO_TERRENO; i++) {
            for (int j = 0; j < TAMANO_TERRENO; j++) {
                this.terreno[i][j] = new Casilla();
            }
        }
    }

    private void initDefensa(Componente estructuraDefensa, int pos) {
        // Label principal 
        JLabel lblDefensa = new JLabel();
        lblDefensa.setLayout(null);
        lblDefensa.setOpaque(true);
        lblDefensa.setBackground(new Color(230, 230, 230));
        lblDefensa.setBorder(BorderFactory.createLineBorder(Color.DARK_GRAY));
        lblDefensa.setBounds(0, pos * 70, 245, 65); // tamaño de tarjeta

        // Imagen
        JLabel lblFoto = new JLabel();
        lblFoto.setBounds(10, 7, 50, 50);

        try {
            ImageIcon icono = new ImageIcon(
                    new ImageIcon(getClass().getResource(estructuraDefensa.getApariencia()))
                            .getImage().getScaledInstance(lblFoto.getWidth(), lblFoto.getHeight(), Image.SCALE_DEFAULT)
            );
            lblFoto.setIcon(icono);
        } catch (Exception e) {
            System.out.println("No se encontró la imagen: " + estructuraDefensa.getApariencia());
        }

        lblFoto.setOpaque(false);
        lblDefensa.add(lblFoto);

        String nombre = estructuraDefensa.getNombre();

        // Nombre
        JLabel lblNombre = new JLabel(nombre);
        lblNombre.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 12));
        lblNombre.setBounds(70, 5, 240, 18);
        lblDefensa.add(lblNombre);

        // Info (vida, nivel)
        JLabel lblInfo = new JLabel(
                "<html><body style='font-size:10px;'>"
                + "Vida: " + estructuraDefensa.getVida() + "<br>"
                + "Nivel: " + estructuraDefensa.getNivelDeAparicion() + "<br>"
                + "</body></html>"
        );
        lblInfo.setBounds(70, 22, 120, 40);
        lblDefensa.add(lblInfo);

        pnlComponentes.add(lblDefensa);

        initArrastreLabel(lblDefensa, estructuraDefensa);
    }

    private void initArrastreLabel(JLabel lbl2, Componente estructuraDefensa) {

        final Point[] puntoInicial = {null};
        final JLabel[] moviendo = {null};
        // Crear copia del panel actual
        JLabel nuevaDefensa = new JLabel();
        nuevaDefensa.setOpaque(true);
        nuevaDefensa.setSize(30, 30);

        estructuraDefensa.setRefLabel(nuevaDefensa);

        lbl2.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                if (estructuraDefensa instanceof ReliquiaDeLaVida && reliquiaPlaced) {
                    txaLog.append("La Reliquia de la Vida solo puede colocarse una vez.\n");
                    limpiarArrastreTemporal();
                    return;
                }
                if (fPrincipal.this.ejercito.size() <= fPrincipal.this.capacidadEjercito + 1) {
                    puntoInicial[0] = e.getPoint(); // Guarda la posición inicial cuando se da click

                    moviendo[0] = new JLabel(lbl2.getText());
                    moviendo[0].setOpaque(false);
                    moviendo[0].setSize(30, 30);
                    moviendo[0].setBorder(lbl2.getBorder());

                    JPanel temporal = (JPanel) getGlassPane();
                    temporal.setLayout(null);
                    temporal.add(moviendo[0]);
                    temporal.setVisible(true);

                    ImageIcon icono = new ImageIcon(
                            new ImageIcon(getClass().getResource(estructuraDefensa.getApariencia()))
                                    .getImage().getScaledInstance(moviendo[0].getWidth(), moviendo[0].getHeight(), Image.SCALE_DEFAULT)
                    );
                    moviendo[0].setIcon(icono);

                    Point puntoFrame = SwingUtilities.convertPoint(temporal, e.getPoint(), getGlassPane());
                    moviendo[0].setLocation(puntoFrame);
                }
            }

            @Override
            public void mouseReleased(MouseEvent e) {
                if (moviendo[0] == null) {
                    return;
                }

                Point dropEnTerreno = e.getLocationOnScreen();
                SwingUtilities.convertPointFromScreen(dropEnTerreno, pnlTerreno);

                int col = dropEnTerreno.x / 30;
                int fila = dropEnTerreno.y / 30;

                boolean dentroPanel
                        = dropEnTerreno.x >= 60 && dropEnTerreno.y >= 60
                        && dropEnTerreno.x < pnlTerreno.getWidth() - 60
                        && dropEnTerreno.y < pnlTerreno.getHeight() - 60;

                if (dentroPanel && !terreno[fila][col].estaOcupada()) {
                    Componente nuevaEstructura = estructuraDefensa.clonar(fPrincipal.this);

                    JLabel nuevaDefensa = new JLabel("");
                    nuevaDefensa.setSize(30, 30);
                    nuevaDefensa.setOpaque(true);
                    nuevaDefensa.setBackground(new java.awt.Color(66, 245, 66));
                    nuevaDefensa.setBorder(BorderFactory.createLineBorder(Color.BLACK));

                    nuevaEstructura.setRefLabel(nuevaDefensa);

                    if (estructuraDefensa instanceof ReliquiaDeLaVida && reliquiaPlaced) {
                        txaLog.append("La Reliquia de la Vida solo puede colocarse una vez.\n");
                        limpiarArrastreTemporal();
                        return;
                    }
                    if (nuevaEstructura instanceof ReliquiaDeLaVida) {
                        fPrincipal.this.reliquia = (ReliquiaDeLaVida) nuevaEstructura;
                        reliquiaPlaced = true;
                    } else {
                        fPrincipal.this.ejercito.add((Defensa) nuevaEstructura);
                    }

                    terreno[fila][col].insertarTropa(nuevaEstructura);
                    pnlTerreno.repaint();
                } else {
                    txaLog.append("Soltado fuera del terreno o la casilla está ocupada.\n");
                }

                // Limpiar el ghost
                JPanel temporal = (JPanel) getGlassPane();
                temporal.remove(moviendo[0]);
                temporal.repaint();
                temporal.setVisible(true);
                moviendo[0] = null;
            }

        });

        lbl2.addMouseMotionListener(new MouseMotionAdapter() {
            @Override
            public void mouseDragged(MouseEvent e) {
                if (moviendo[0] != null) {
                    JPanel temporal = (JPanel) getGlassPane();
                    Point p = SwingUtilities.convertPoint(lbl2, e.getPoint(), temporal);
                    moviendo[0].setLocation(p.x - puntoInicial[0].x, p.y - puntoInicial[0].y);
                    temporal.repaint();
                }
            }
        });
    }

    private void limpiarArrastreTemporal() {
        JPanel temporal = (JPanel) getGlassPane();
        temporal.removeAll();
        temporal.repaint();
        temporal.setVisible(false);
    }

    private void generarTerreno() {
        int size = 30; // Tamaño de cada casilla (en píxeles)
        int x, y;

        for (int fila = 0; fila < TAMANO_TERRENO; fila++) {
            for (int col = 0; col < TAMANO_TERRENO; col++) {

                // Calcular coordenadas en píxeles
                x = col * size;
                y = fila * size;

                // Crear el JLabel visual
                JLabel lblCasilla = new JLabel();
                lblCasilla.setOpaque(true);
                lblCasilla.setBorder(BorderFactory.createLineBorder(Color.BLACK, 1));
                lblCasilla.setBounds(x, y, size, size);

                lblCasilla.setBackground(new java.awt.Color(66, 245, 66));

                // Bordes del terreno (oscuros)
                if (fila >= TAMANO_TERRENO - 2 || col >= TAMANO_TERRENO - 2 || fila < 2 || col < 2) {
                    lblCasilla.setBackground(new java.awt.Color(47, 79, 79));
                }

                // Agregar el label al panel
                pnlTerreno.add(lblCasilla);

                terreno[fila][col] = new Casilla(pnlTerreno, txaLog, new Point(x, y), lblCasilla);
            }
        }

        pnlTerreno.repaint();
    }

    public void comprobarGanar() {

    }

    public void comprobarPerder() {

    }

    public void subirDeNivel() {
        //Instrucciones de cambios cuando suben de nivel
    }

    public void iniciarJuego() {
        //Instrucciones para iniciar el juego
//        for (Componente estructura : ejercito) {
//            estructura.start();
//        }
        inicializarJuego();
    }

    public void inicializarDefensas() {
        //leer defensas del archivo
        //Cargar al panel componentes las defensas al arrayList defensas disponibles
        defensasDisponibles.add(reliquia);
        defensasDisponibles.add(new DefensaContacto(this, "Hulk - De Contacto", 100, 0, 0, 0, 0, 0, 0, "/Imagenes/zombie4.gif"));
        //Habilitar las que esten al nivel y desabilitar las que no
        int i = 0;
        for (Componente defensa : defensasDisponibles) {
            if (defensa.getNivelDeAparicion() <= nivelActual) {
                initDefensa(defensa, i);
                i++;
            }
        }
    }
    
    public void pausar() {
        //leer defensas del archivo
        //Cargar a los zombies al arrayList defensas disponibles
        //Habilitar las que esten al nivel
        for (Zombie zombie : atacantes) {
                zombie.setPause();  
        }
        
        for (Defensa defensa : ejercito) {
            if(defensa.isPause()){
                defensa.setPause();
            }else{
                defensa.setPause();
            }
        }
    }

    public void inicializarJuego() {
        //leer defensas del archivo
        //Cargar a los zombies al arrayList defensas disponibles
        //Habilitar las que esten al nivel
        for (Zombie zombies : atacantes) {
            zombies.start();
        }
        
         for (Defensa defensa : ejercito) {
            defensa.start();
        }
    }

    public Point getObjetivoLocation() {
        return this.reliquia.getRefLabel().getLocation();
    }

    public ReliquiaDeLaVida getObjetivo() {
        return this.reliquia;
    }

    public void moverZombie(JLabel refLabel, int x, int y) {
        refLabel.setLocation(x, y);
    }

    private void generarZombies(String tipo) {
        int tamano = capacidadEjercito;
        Random rand = new Random();

        for (int i = 0; i < tamano; i++) {
            JLabel nuevoLabel = new JLabel();
            nuevoLabel.setOpaque(false);
            nuevoLabel.setSize(30, 30);

            int fila = 0, col = 0;
            boolean posicionValida = false;
            int intentos = 0;

            while (!posicionValida && intentos < 100) {
                intentos++;

                int borde = rand.nextInt(4); // 0=arriba, 1=abajo, 2=izquierda, 3=derecha
                switch (borde) {
                    case 0 -> {
                        fila = 0;
                        col = rand.nextInt(TAMANO_TERRENO);
                    }
                    case 1 -> {
                        fila = TAMANO_TERRENO - 1;
                        col = rand.nextInt(TAMANO_TERRENO);
                    }
                    case 2 -> {
                        col = 0;
                        fila = rand.nextInt(TAMANO_TERRENO);
                    }
                    case 3 -> {
                        col = TAMANO_TERRENO - 1;
                        fila = rand.nextInt(TAMANO_TERRENO);
                    }
                }

                if (!terreno[fila][col].estaOcupada()) {
                    posicionValida = true;
                }
            }

            Point ubicacion = terreno[fila][col].getPosicion();
            nuevoLabel.setLocation(ubicacion);

            Zombie newZombie = new ZombieContacto(this, "Zombie - De Contacto",
                    0, 0, 0, 0, 0, 0, 0, "/Imagenes/zombie4.gif", 0);

            newZombie.setRefLabel(nuevoLabel);
            atacantes.add(newZombie);

            terreno[fila][col].insertarTropa(newZombie);
        }

        pnlTerreno.repaint();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnIniciar;
    private javax.swing.JButton btnPausa;
    private javax.swing.JButton btnSalir;
    private javax.swing.JList<String> jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel pnlComponentes;
    private javax.swing.JPanel pnlTerreno;
    private javax.swing.JPanel pnlUtilidades;
    private javax.swing.JTextArea txaLog;
    // End of variables declaration//GEN-END:variables
}
